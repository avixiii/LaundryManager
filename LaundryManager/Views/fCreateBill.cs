using DevExpress.XtraEditors;
using DevExpress.XtraGrid;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace LaundryManager.Views
{
    public partial class fCreateBill : DevExpress.XtraEditors.XtraForm
    {
        public fCreateBill()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
        }

        private void fCreateBill_Load(object sender, EventArgs e)
        {
            gcCart.DataSource = SampleDS();
        }

        BindingList<BillDetails> ds = new BindingList<BillDetails>();
        public BindingList<BillDetails> SampleDS()
        {
            
            return ds;
        }

        public class BillDetails
        {
            public string ServID { get; set; }
            public string ServiceNameBD { get; set; }
            public Int32 Quantity { get; set; }
            public double Total { get; set; }

            public BillDetails()
            {
            }

            public BillDetails(string serviceID, string serviceName, int quantity, double total)
            {
                ServID = serviceID;
                ServiceNameBD = serviceName;
                Quantity = quantity;
                Total = total;
            }
        }

        IDictionary<string, int> serviceList = new Dictionary<string, int>();
        private void ribtnAdd_Click(object sender, EventArgs e)
        {
            object value;

            int rowIndex = gvServiceList.FocusedRowHandle;

            // Lấy id
            string colFieldID = "ID";
            value = gvServiceList.GetRowCellValue(rowIndex, colFieldID);
            string serviceID = value.ToString();

            // Lấy tên
            string colFieldName = "ServiceName";
            value = gvServiceList.GetRowCellValue(rowIndex, colFieldName);
            string serviceName = value.ToString();

            // Lấy đơn giá
            string colFieldPrice = "Price";
            value = gvServiceList.GetRowCellValue(rowIndex, colFieldPrice);
            string s = value.ToString();
            double price = double.Parse(s);


            double total = price; // Thành tiền


            bool flag = false; // Biến kiểm tra service có trong gvCart chưa
            var quantity = 1; // Biến đếm số lượng trong gvCart

            // Check xem có trong gvCart chưa 
            foreach (KeyValuePair<string, int> kvp in serviceList)
            {
                var key = kvp.Key;
                if (key == serviceID)
                {
                    flag = true;
                    quantity = kvp.Value;
                }    
            }    

            // Nếu tồn tại trong gvCart thì tăng số lượng lên 1
            if (flag == true)
            {
                quantity++;
                int temp = quantity; 
                total = total * quantity; // Thành tiền bằng 
                serviceList[serviceID] = quantity; // gán lại cho hashtable
                // So sánh serviceID gvServiceList vs ...gvCart
                int count = gvCart.DataRowCount;          
                for (int idx = 0; idx < count; idx++)
                {
                    string servID = (string)gvCart.GetRowCellValue(idx, "ServID");
                    if (serviceID == servID)
                    {
                        
                        gvCart.SetRowCellValue(idx, "Quantity", temp);
                        gvCart.SetRowCellValue(idx, "Total", total);
                        break;
                    }    
                }   
            }
            else // KHÔNG TỒN TẠI THÌ THÊM MỚI
            {
                serviceList.Add(serviceID, 1);
                ds.Add(new BillDetails(serviceID ,serviceName, 1, total));
            }  
        }

        private void riBtnDelete_Click(object sender, EventArgs e)
        {
            int rowIndex = gvCart.FocusedRowHandle;
            string colFieldName = "ServID";
            object value = gvCart.GetRowCellValue(rowIndex, colFieldName);
            string str = (string)value;
            serviceList.Remove(str);
            gvCart.DeleteRow(gvCart.FocusedRowHandle);
        }

        private void btnSave_Click(object sender, EventArgs e)
        {
            string billCode = txtBillCode.Text;
            string billDate = dtBillDate.Text;
            string appointmentDate = dtAppointmentDate.Text;
            string customerName = txtCustomerName.Text;
            string phone = txtPhone.Text;
            string total = txtTotal.Text; // Tiền khi chưa chiết khẩu
            string discount = txtDiscount.Text;
            string total1 = txtTotal1.Text; // Tiền sau khi đã chiết khẩu
            string status = cbStatus.GetItemText(cbStatus.SelectedItem);

            int x = gvCart.DataRowCount;

           
            MessageBox.Show(x.ToString());
            
           
        }

        private void riBtnRemove_Click(object sender, EventArgs e)
        {
            object value;

            int rowIndex = gvServiceList.FocusedRowHandle;

            // Lấy id
            string colFieldID = "ID";
            value = gvServiceList.GetRowCellValue(rowIndex, colFieldID);
            string serviceID = value.ToString();

            // Lấy số lượng 
            string colFieldQuantity = "Quantity";
            value = gvCart.GetRowCellValue(rowIndex, colFieldQuantity);
            var quantity = int.Parse(value.ToString());

            // Lấy thành tiền
            string colFieldTotal = "Total";
            value = gvCart.GetRowCellValue(rowIndex, colFieldTotal);
            string s = value.ToString();
            double total = double.Parse(s);

            // Lấy price

            double price = total / quantity;

           

            if (quantity <= 1)
            {
                string colFieldName = "ServID";
                value = gvCart.GetRowCellValue(rowIndex, colFieldName);
                string str = (string)value;
                serviceList.Remove(str);
                gvCart.DeleteRow(gvCart.FocusedRowHandle);
            }
            else
            {


                quantity--;
                int temp = quantity;
                total = total - price; // Thành tiền bằng 
                serviceList[serviceID] = quantity; // gán lại cho hashtable
                 // So sánh serviceID gvServiceList vs ...gvCart
                int count = gvCart.DataRowCount;
                for (int idx = 0; idx < count; idx++)
                {
                    string servID = (string)gvCart.GetRowCellValue(idx, "ServID");
                    if (serviceID == servID)
                    {

                        gvCart.SetRowCellValue(idx, "Quantity", temp);
                        gvCart.SetRowCellValue(idx, "Total", total);
                        break;
                    }
                }
            }    
        }
    }
}